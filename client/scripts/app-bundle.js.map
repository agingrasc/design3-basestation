{"version":3,"sources":["app.js","environment.js","main.js","http/base-station-request.js","resources/index.js","services/task.js","services/timer.js","services/vision.js","components/competition/competition.js","components/debug/debug.js","components/go-to-position/go-to-position.js","components/informations/informations.js","components/navbar/navbar.js","components/robot-controller/robot-controller.js","/home/nathaniel/Documents/Universit√©/Design3/design3-basestation/client/src/components/stat/stat.js","components/world-vision/world-vision-competition.js","components/world-vision/world-vision-debug.js"],"names":["App","configureRouter","config","router","title","navStrat","instruction","moduleId","fragment","href","map","route","name","nav","debug","testing","configure","Promise","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","setRoot","BaseStationRequest","baseStationUrl","post","data","endpoint","fetch","method","headers","body","JSON","stringify","res","json","responseData","console","log","Task","timer","undefined","tasks","ws","WebSocket","onopen","taskRegisterMessage","send","onmessage","evt","parse","splice","length","taskName","taskStatus","stringToBoolean","onCycleEnd","pause","push","snakeToCamel","colorFrom","startTask","resetTasks","registerInformations","registerCycleEnd","stringBoolean","status","s","charAt","toUpperCase","replace","m","slice","Timer","lastTime","isPause","isStarted","totalTime","time","Date","valueOf","currentLap","setInterval","updateTime","bind","timeDelta","seconds","Math","floor","minutes","stop","clearInterval","reset","Vision","informations","imageView","world_information","origin","ratio","goto","robotPositionRegisterMessage","image","x","width","world","base_table","dimension","height","window","requestAnimationFrame","imagePath","obstacles","worldDimensions","round","parseFloat","unit","robot","position","y","orientation","theta","world_dimension","sent_dimension","checkReadyToStart","registerImageView","registerGotoPosition","worldInformation","registerGoto","Competition","Debug","GoToPosition","vision","httpClient","info","attached","pathfinder","buttonName","execute","xPosition","yPosition","Informations","task","task_information","resetDetection","mode","response","message","catch","err","colorFor","Navbar","RobotController","taskService","currentCommand","currentScaling","currentOrientation","messageReceived","showImage","fakeSegmentation","takePicture","showSegmentsCoordinates","robotOnline","taskSent","taskDone","options","scalings","orientations","event","segmentedImage","thresholdedImage","thresholded_image","setTaskDone","sendCommand","taskId","indexOf","toString","scaling","value","isTakePicture","fake_segmentation","isTaskCompetition","isLightRedLedTask","segmentsCoordinates","segments","coord","coordToString","onChange","currentTaskIndex","isDrawPicture","resetTask","stopTimer","pauseTimer","WorldVisionCompetition","canvasId","x_position","y_position","chosen_x_position","chosen_y_position","canvas","document","getElementById","context","getContext","WorldVisionDebug","visionProperties","addEventListener","mousePos","getMousePos","adjustPositions","resetPathRendering","rect","getBoundingClientRect","clientX","left","clientY","top","worldOriginX","worldOriginY","worldOriginRatio"],"mappings":"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","file":"app-bundle.js","sourcesContent":["export class App {\n    configureRouter(config, router) {\n        config.title = 'Aurelia';\n        var navStrat = (instruction) => {\n            instruction.config.moduleId = instruction.fragment;\n            instruction.config.href = instruction.fragment;\n        };\n        config.map([{\n            route: ['', 'competition'],\n            name: 'competition',\n            moduleId: './components/competition/competition',\n            nav: true,\n            title: 'Competition'\n        }, {\n            route: 'debug',\n            name: 'debug',\n            moduleId: './components/debug/debug',\n            nav: true,\n            title: 'Debug'\n        }]);\n        this.router = router;\n    }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\nPromise.config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export class BaseStationRequest {\n    constructor() {\n        this.baseStationUrl = 'http://localhost:12345';\n    }\n\n    post(data, endpoint) {\n        fetch(this.baseStationUrl + endpoint, {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        })\n        .then(function(res) {\n            return res.json();\n        })\n        .then(function(responseData) {\n            console.log(JSON.stringify(responseData));\n        });\n    }\n}\n","export function configure(config) {\n    //config.globalResources([]);\n}\n","import { inject } from 'aurelia-framework';\n\nimport { Timer } from './timer';\n\n@inject(Timer)\nexport class Task {\n    constructor(timer) {\n        this.timer = timer;\n        this.data = undefined;\n        this.tasks = [];\n    }\n\n    start() {\n        this.ws = new WebSocket('ws://localhost:3000');\n\n        this.ws.onopen = () => {\n            let taskRegisterMessage = JSON.stringify({ 'headers': 'register_task_data' });\n            this.ws.send(taskRegisterMessage);\n        };\n\n        this.ws.onmessage = (evt) => {\n            let data = JSON.parse(evt.data);\n            this.tasks.splice(0, this.tasks.length);\n\n            for (let taskName in data.data) {\n                let taskStatus = stringToBoolean(data.data[taskName]);\n\n                if (taskName === 'light_red_led') {\n                    if (taskStatus) {\n                        this.onCycleEnd();\n                        this.timer.pause();\n                    }\n                }\n\n                this.tasks.push({\n                    'name': snakeToCamel(taskName),\n                    'done': taskStatus,\n                    'color': colorFrom(taskStatus)\n                });\n            }\n        };\n    }\n\n    startTask() {\n        this.timer.start();\n    }\n\n    resetTasks() {\n        this.ws.send(JSON.stringify({ \"headers\": \"reset_tasks\" }));\n    }\n\n    registerInformations(data) {\n        this.tasks = data;\n    }\n\n    registerCycleEnd(onCycleEnd) {\n        this.onCycleEnd = onCycleEnd;\n        this.start();\n    }\n\n}\n\nfunction stringToBoolean(stringBoolean) {\n    if (stringBoolean === 'True') {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction colorFrom(status) {\n    if (status) {\n        return 'green';\n    } else {\n        return 'red';\n    }\n}\n\nfunction snakeToCamel(s) {\n    return s.charAt(0).toUpperCase() + s.replace(/(\\_\\w)/g, function(m) { return ' ' + m[1].toUpperCase(); }).slice(1);\n}\n","export class Timer {\n    constructor() {\n        this.lastTime = 0;\n        this.isPause = false;\n        this.isStarted = false;\n        this.totalTime = 0;\n        this.time = '00:00';\n    }\n\n    start() {\n        this.lastTime = new Date().valueOf();\n\n        if (!this.isStarted) {\n            this.currentLap = setInterval(this.updateTime.bind(this), 1000);\n            this.isStarted = true;\n        }\n    }\n\n    updateTime() {\n        let timeDelta = new Date().valueOf() - this.lastTime;\n\n        this.totalTime = this.totalTime + timeDelta;\n\n        let seconds = Math.floor((this.totalTime / 1000) % 60);\n        let minutes = Math.floor(((this.totalTime / (1000 * 60)) % 60));\n\n        this.lastTime = new Date().valueOf();\n\n        this.time = ('0' + minutes).slice(-2) + ':' + ('0' + seconds).slice(-2);\n    }\n\n    stop() {\n        clearInterval(this.currentLap);\n\n        this.isStarted = false;\n    }\n\n    reset() {\n        this.stop();\n        this.totalTime = 0;\n        this.time = '00:00';\n    }\n\n    pause() {\n        this.stop();\n    }\n}\n","export class Vision {\n    constructor() {\n        this.informations = undefined;\n        this.imageView = undefined;\n        this.world_information = undefined;\n        this.origin = undefined;\n        this.ratio = undefined;\n        this.goto = undefined;\n    }\n\n    start() {\n        this.ws = new WebSocket('ws://localhost:3000');\n\n        this.ws.onopen = () => {\n            let robotPositionRegisterMessage = JSON.stringify({'headers': 'register_vision_data'});\n            this.ws.send(robotPositionRegisterMessage);\n        };\n\n        this.ws.onmessage = (evt) => {\n            let data = JSON.parse(evt.data);\n\n            if (data.image.origin.x !== '') {\n                this.world_information.origin = data.image.origin;\n                this.world_information.ratio = data.image.ratio;\n                this.goto.width = data.world.base_table.dimension.width;\n                this.goto.length = data.world.base_table.dimension.height;\n            }\n\n            window.requestAnimationFrame(() => {\n                this.imageView.imagePath = 'data:image/jpeg;base64,' + data.image.data;\n            });\n\n            this.informations.obstacles = data.world.obstacles;\n\n            let world = data.world;\n            this.informations.worldDimensions = {\n                'width': Math.round(parseFloat(world.base_table.dimension.width)),\n                'length': Math.round(parseFloat(world.base_table.dimension.height)),\n                'unit': world.unit\n            };\n\n            // Update robot position\n            let robot = data.world.robot;\n            this.informations.robot = {\n                'position': {\n                    'x': robot.position.x,\n                    'y': robot.position.y\n                },\n                'orientation': robot.orientation\n            };\n\n            this.goto.robot = {\n                'position': {\n                    'x': robot.position.x,\n                    'y': robot.position.y,\n                    'theta': robot.theta\n                }\n            };\n\n            // Update world obstacles\n            this.goto.obstacles = [];\n\n            // Update world dimension\n            this.world_information.world_dimension = data.image.sent_dimension;\n        };\n    }\n\n    checkReadyToStart() {\n        if (this.imageView === undefined) {\n            return;\n        }\n        if (this.informations === undefined) {\n            return;\n        }\n        if (this.goto === undefined) {\n            return;\n        }\n        this.start();\n    }\n\n    registerImageView(imageView) {\n        this.imageView = imageView;\n        this.checkReadyToStart();\n    }\n\n    registerInformations(informations) {\n        this.informations = informations;\n        this.checkReadyToStart();\n    }\n\n    registerGotoPosition(worldInformation) {\n        this.world_information = worldInformation;\n    }\n\n    registerGoto(goto) {\n        this.goto = goto;\n        this.checkReadyToStart();\n    }\n}\n","export class Competition {}\n","export class Debug {\n}\n","import {\n    inject\n} from 'aurelia-framework';\n\nimport {\n    BaseStationRequest\n} from '../../http/base-station-request';\n\nimport {\n    bindable\n} from 'aurelia-framework';\n\nimport {\n    Vision\n} from '../../services/vision';\n\n@inject(Vision)\nexport class GoToPosition {\n\n    @bindable xPosition = 0;\n    @bindable yPosition = 0;\n    @bindable theta = 0\n    @bindable pathfinder = false;\n\n    constructor(vision) {\n        this.httpClient = new BaseStationRequest();\n        this.vision = vision;\n        this.info = {};\n        this.vision.registerGoto(this.info);\n    }\n\n    attached() {\n        if (!this.pathfinder) {\n            this.buttonName = 'go to pathfinder';\n            this.endpoint = '/go-to-pathfinder';\n        } else {\n            this.buttonName = 'go to position';\n            this.endpoint = '/go-to-position';\n        }\n    }\n\n    execute() {\n        let body = {\n            'destination': {\n                'x': this.xPosition,\n                'y': this.yPosition,\n                'theta': this.theta\n            }\n        };\n\n        this.httpClient.post(body, this.endpoint);\n    }\n}\n","import { inject } from 'aurelia-framework';\n\nimport { Vision } from '../../services/vision';\nimport { Timer } from '../../services/timer';\nimport { Task } from '../../services/task';\n\n@inject(Vision, Timer, Task)\nexport class Informations {\n    constructor(vision, timer, task) {\n        this.timer = timer;\n        this.vision = vision;\n        this.informations = {};\n        this.informations.obstacles = [];\n        this.task = task;\n        this.task_information = [];\n    }\n\n    attached() {\n        this.vision.registerInformations(this.informations);\n        this.task.registerInformations(this.task_information);\n    }\n\n    resetDetection() {\n        fetch('http://0.0.0.0:5000/vision/reset-detection', {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json'\n            },\n            mode: 'no-cors'\n        }).then(function(response) {\n            return response.json();\n        }).then(function(message) {\n            console.log(message);\n        }).catch(function(err) {\n            console.log(err);\n        });\n    }\n\n    colorFor(task) {\n        return 'red-text';\n    }\n}\n","export class Navbar {}\n","import { inject } from 'aurelia-framework';\n\nimport { Timer } from '../../services/timer';\nimport { Task } from '../../services/task';\n\n@inject(Timer, Task)\nexport class RobotController {\n    constructor(timer, task) {\n        this.timer = timer;\n        this.taskService = task;\n\n        this.currentCommand = null;\n        this.currentScaling = null;\n        this.currentOrientation = null;\n        this.messageReceived = false;\n        this.showImage = true;\n        this.fakeSegmentation = false;\n        this.takePicture = false;\n        this.showSegmentsCoordinates = false;\n        this.robotOnline = false;\n        this.taskSent = false;\n        this.taskDone = false;\n\n        this.options = [\n            '0 - Competition',\n            '1 - Initial Orientation',\n            '2 - Identify Antenna',\n            '3 - Receive Information',\n            '4 - Go to Image',\n            '5 - Take Picture',\n            '6 - Go to Drawing Area',\n            '7 - Draw Figure',\n            '8 - Go Out of Drawing Area',\n            '9 - Light Red Led',\n            '10 - Toggle Pencil',\n            '11 - Null',\n            '12 - Images Routine'\n        ];\n\n        this.scalings = [\n            { 'value': '1', 'name': '4' },\n            { 'value': '0.5', 'name': '2' }\n        ];\n\n        this.orientations = [\n            { 'value': 'SOUTH', 'name': 'SUD' },\n            { 'value': 'NORTH', 'name': 'NORD' },\n            { 'value': 'EAST', 'name': 'EST' },\n            { 'value': 'WEST', 'name': 'WEST' }\n        ];\n\n        this.ws = new WebSocket('ws://localhost:3000');\n\n        this.ws.onopen = () => {\n            this.ws.send(JSON.stringify({ 'headers': 'register_image_segmentation' }));\n            this.ws.send(JSON.stringify({ 'headers': 'register_robot_online' }));\n        };\n\n        this.ws.onmessage = (event) => {\n            let data = JSON.parse(event.data);\n\n            if (data.data === 'robot_online') {\n                this.robotOnline = true;\n            } else if (data.data === 'robot_offline') {\n                this.robotOnline = false;\n            } else if (data.data.image) {\n                this.segmentedImage = data.data.image;\n                this.thresholdedImage = data.data.thresholded_image;\n            }\n        };\n    }\n\n    attached() {\n        this.taskService.registerCycleEnd(this.setTaskDone.bind(this));\n    }\n\n    setTaskDone() {\n        this.taskDone = true;\n    }\n\n    sendCommand() {\n        const taskId = this.options.indexOf(this.currentCommand).toString();\n        const data = { 'task_id': taskId };\n\n        if (this.currentScaling) {\n            data.scaling = this.currentScaling.value;\n            data.orientation = this.currentOrientation.value;\n        }\n\n        if (isTakePicture(taskId) && this.fakeSegmentation) {\n            data.fake_segmentation = true;\n        } else if (isTaskCompetition(taskId)) {\n            this.taskSent = true;\n            this.taskDone = false;\n        } else if (isLightRedLedTask(taskId)) {\n            this.taskDone = true;\n            this.taskSent = false;\n        }\n\n        fetch('http://localhost:12345/start-tasks', {\n                method: 'POST',\n                headers: {\n                    'content-type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            })\n            .then((res) => res.json())\n            .then((responseData) => {\n                if (responseData.message) {\n                    this.startTask();\n                }\n\n                if (responseData.image) {\n                    this.segmentsCoordinates = responseData.segments.map((coord) => coordToString(coord));\n                    this.segmentedImage = responseData.image;\n                    this.thresholdedImage = responseData.thresholded_image;\n                }\n            });\n    }\n\n    onChange() {\n        const currentTaskIndex = this.options.indexOf(this.currentCommand);\n        if (isTakePicture(currentTaskIndex)) {\n            this.takePicture = true;\n            this.showImage = true;\n            this.showSegmentsCoordinates = false;\n        } else if (isDrawPicture(currentTaskIndex)) {\n            this.takePicture = false;\n            this.showImage = false;\n            this.showSegmentsCoordinates = true;\n        } else {\n            this.takePicture = false;\n            this.showSegmentsCoordinates = true;\n        }\n    }\n\n    startTask() {\n        this.timer.start();\n        this.taskSent = false;\n    }\n\n    resetTask() {\n        this.taskService.resetTasks(() => {\n            this.taskDone = false;\n        });\n    }\n\n    stopTimer() {\n        this.timer.stop();\n    }\n\n    pauseTimer() {\n        this.timer.pause();\n        this.taskDone = false;\n        this.taskSent = false;\n    }\n}\n\n\nfunction isTakePicture(taskId) {\n    return taskId === 5 || taskId === '5';\n}\n\nfunction isTaskCompetition(taskId) {\n    return taskId === 0 || taskId === '0';\n}\n\nfunction isDrawPicture(taskId) {\n    return taskId === 7 || taskId === '7';\n}\n\nfunction isLightRedLedTask(taskId) {\n    return taskId === 9 || taskId === '9';\n}\n\nfunction coordToString(coord) {\n    return [\n        Math.round(parseFloat(coord[0])),\n        Math.round(parseFloat(coord[1]))\n    ].toString();\n}\n",null,"export class WorldVisionCompetition {\n\n    constructor() {\n        this.canvasId = \"monCanvas\";\n        this.x_position = 0;\n        this.y_position = 0;\n        this.imagePath = \"./src/components/world-vision/image14.jpg\";\n        this.chosen_x_position = 0;\n        this.chosen_y_position = 0;\n    }\n\n    attached() {\n        var canvas = document.getElementById(this.canvasId);\n        var context = canvas.getContext('2d');\n    }\n\n    start() {\n        console.log(\"Started\");\n    }\n}\n","import { inject } from 'aurelia-framework';\nimport { Vision } from '../../services/vision';\n\n@inject(Vision)\nexport class WorldVisionDebug {\n    constructor(vision) {\n        this.vision = vision;\n\n        this.canvasId = 'monCanvas';\n\n        this.visionProperties = {};\n        this.visionProperties.imagePath = './src/components/world-vision/image14.jpg';\n\n        this.x_position = 0;\n        this.y_position = 0;\n\n        this.chosen_x_position = 0;\n        this.chosen_y_position = 0;\n\n        this.world_information = {};\n        this.theta = 0;\n    }\n\n    attached() {\n        let canvas = document.getElementById(this.canvasId);\n\n        canvas.addEventListener('mousemove', (evt) => {\n            let mousePos = this.getMousePos(canvas, evt);\n            this.adjustPositions(mousePos);\n        }, false);\n\n        canvas.addEventListener('click', (evt) => {\n            this.chosen_x_position = this.x_position;\n            this.chosen_y_position = this.y_position;\n        }, false);\n\n        this.vision.registerImageView(this.visionProperties);\n        this.vision.registerGotoPosition(this.world_information);\n    }\n\n    resetPathRendering() {\n        fetch('http://0.0.0.0:5000/vision/reset-rendering', {\n            method: \"POST\",\n            headers: {\n                'content-type': 'application/json'\n            },\n            mode: 'no-cors'\n        })\n            .then((response) => {\n                console.log(response);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n\n    getMousePos(canvas, evt) {\n        let rect = canvas.getBoundingClientRect();\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    adjustPositions(mousePos) {\n        let worldOriginX = parseFloat(this.world_information.origin.x);\n        let worldOriginY = parseFloat(this.world_information.origin.y);\n        let worldOriginRatio = parseFloat(this.world_information.ratio);\n\n        this.x_position = Math.floor((mousePos.x - worldOriginX) * worldOriginRatio * 10);\n        this.y_position = Math.floor((mousePos.y - worldOriginY) * worldOriginRatio * 10);\n    }\n}\n"],"sourceRoot":"../src"}